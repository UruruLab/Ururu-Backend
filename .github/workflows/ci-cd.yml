name: CI/CD - DockerHub Push & Blue-Green Deploy

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드와 설정 파일 체크아웃
      - name: Checkout app repository
        uses: actions/checkout@v3

      - name: Checkout private config repository
        uses: actions/checkout@v3
        with:
          repository: UruruLab/Ururu-Backend-Config
          token: ${{ secrets.PRIVATE_REPO_TOKEN }}
          path: config

      # 2. 설정 파일 복사
      - name: Copy config files (application*.yml)
        run: |
          mkdir -p src/main/resources/
          cp config/application-*.yml src/main/resources/

      # 3. JDK 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Grant permission to Gradle
        run: chmod +x ./gradlew

      # 4. 애플리케이션 빌드
      - name: Build Spring Boot JAR
        run: ./gradlew clean bootJar --no-daemon

      # 5. DockerHub 로그인 및 푸시
      - name: Login to DockerHub
        run: |
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: docker build -t juwon0909/ururu:latest -f docker/Dockerfile .

      - name: Push image to DockerHub
        run: docker push juwon0909/ururu:latest

      # 6. EC2에 파일 업로드
      - name: Ensure remote app directory exists
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: mkdir -p /home/ec2-user/app

      - name: Upload docker-compose-prod.yml to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: docker/docker-compose-prod.yml
          target: /home/ec2-user/app/
          strip_components: 1
          overwrite: true

      - name: Upload nginx configs and scripts to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: |
            docker/nginx/nginx.conf.template
            docker/nginx/switch.sh
            docker/nginx/rollback.sh
            docker/nginx/healthcheck.sh
          target: /home/ec2-user/app/nginx/
          strip_components: 2
          overwrite: true

      - name: Upload .env to EC2 (from config repo)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: config/.env
          target: /home/ec2-user/app/
          strip_components: 1
          overwrite: true

      # 7. 현재 활성 컨테이너 확인 및 타겟 결정
      - name: Determine current active container
        run: |
          ACTIVE=$(ssh -o StrictHostKeyChecking=no -i "${{ secrets.EC2_SSH_KEY }}" \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
            "grep -q ururu-blue /home/ec2-user/app/.nginx-env && echo ururu-blue || echo ururu-green")

          echo "ACTIVE=$ACTIVE" >> "$GITHUB_ENV"

          if [[ "$ACTIVE" == "ururu-blue" ]]; then
            echo "TARGET=ururu-green" >> "$GITHUB_ENV"
          else
            echo "TARGET=ururu-blue" >> "$GITHUB_ENV"
          fi

      # 8. 대상 컨테이너 배포
      - name: Deploy to target container
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ec2-user/app
            docker compose -f docker-compose-prod.yml pull ${{ env.TARGET }}
            docker compose -f docker-compose-prod.yml up -d --no-deps ${{ env.TARGET }}

      # 9. 헬스 체크 수행
      - name: Health check on target container
        id: health-check
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ec2-user/app
            bash nginx/healthcheck.sh $(if [ "${{ env.TARGET }}" = "ururu-blue" ]; then echo 8081; else echo 8082; fi)

      # 10. Nginx 트래픽 전환
      - name: Switch Nginx traffic to target
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ec2-user/app
            bash nginx/switch.sh ${{ env.TARGET }}

      # 11. 롤백 (헬스체크 실패 시)
      - name: Rollback if health check failed
        if: steps.health-check.outcome == 'failure'
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ec2-user/app
            bash nginx/rollback.sh ${{ env.TARGET }}

      # 12. 이전 컨테이너 제거
      - name: Remove old container
        if: success()
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ec2-user/app
            docker rm -f ${{ env.ACTIVE }} || true
