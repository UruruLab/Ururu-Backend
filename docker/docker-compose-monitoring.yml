version: "3.8"

services:
  # Prometheus (메트릭 수집)
  prometheus:
    image: prom/prometheus:latest
    container_name: ururu-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Loki (로그 수집)
  loki:
    image: grafana/loki:latest
    container_name: ururu-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    environment:
      - LOKI_USERNAME=${LOKI_USERNAME}
      - LOKI_PASSWORD=${LOKI_PASSWORD}
    volumes:
      - ./monitoring/loki/local-config.yml:/etc/loki/local-config.yml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yml
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Promtail (로그 수집기)
  promtail:
    image: grafana/promtail:latest
    container_name: ururu-promtail
    restart: unless-stopped
    volumes:
      - ./monitoring/promtail/config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /app/logs:/app/logs:ro
      - promtail_positions:/var/lib/promtail
    command: -config.file=/etc/promtail/config.yml
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9080/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      loki:
        condition: service_healthy

  # Grafana (대시보드)
  grafana:
    image: grafana/grafana:latest
    container_name: ururu-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_SECURITY_COOKIE_SECURE=${GRAFANA_COOKIE_SECURE:-false}
      - GF_SERVER_ROOT_URL=${GRAFANA_ROOT_URL:-http://localhost:3000}
      - GF_SERVER_SERVE_FROM_SUB_PATH=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  default:
    name: ururu-monitoring

volumes:
  prometheus_data:
  grafana_data:
  loki_data:
  promtail_positions: